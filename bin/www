// #!/usr/bin/env node

// const http = require('http');
// const app = require('../app');
// const socketIo = require('socket.io');
// const mongoose = require('mongoose'); // Import mongoose


// const port = normalizePort(process.env.PORT || '8002');
// app.set('port', port);

// const server = http.createServer(app);

// const io = socketIo(server, {
//   cors: {
//     origin: 'http://localhost:3000', // Ensure this matches your frontend origin
//     methods: ['GET', 'POST', 'PUT', 'DELETE'],
//     allowedHeaders: ['Content-Type'],
//   }
// });

// io.on('connection', (socket) => {
//   console.log('A user connected:', socket.id);

//   // Example: Generate a notification when a user connects
//   const notification = {
//     message: `User ${socket.id} has connected`,
//     timestamp: new Date(),
//   };

//   // Emit the notification to the client
//   socket.emit('new_notification', notification);

//   // Save the notification to the database
//   saveNotificationToDB(notification);

//   // Handle client disconnection
//   socket.on('disconnect', () => {
//     console.log('User disconnected:', socket.id);
//   });
// });

// function saveNotificationToDB(notification) {
//   const Notification = mongoose.model('Notification'); // Assuming you have a Mongoose model
//   const newNotification = new Notification(notification);
  
//   newNotification.save((err) => {
//     if (err) {
//       console.error('Error saving notification:', err);
//     } else {
//       console.log('Notification saved to DB');
//     }
//   });
// }


// server.listen(port, () => {
//   console.log(`Server is running on port ${port}`);
// });

// function normalizePort(val) {
//   const port = parseInt(val, 10);
//   if (isNaN(port)) return val;
//   if (port >= 0) return port;
//   return false;
// }


// /**
//  * Event listener for HTTP server "error" event.
//  */

// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }

//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;

//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }

// /**
//  * Event listener for HTTP server "listening" event.
//  */

// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }



// #!/usr/bin/env node
// #!/usr/bin/env node

const http = require('http');
const app = require('../app');
const socketIo = require('socket.io');
const mongoose = require('mongoose');
const Notification = require('../models/Notification'); // Import the Notification model

// Normalize port
const port = normalizePort(process.env.PORT || '8002');
app.set('port', port);

// Create server
const server = http.createServer(app);

// WebSocket setup
const io = socketIo(server, {
  cors: {
    origin: 'http://localhost:3000', // Ensure this matches your frontend origin
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    allowedHeaders: ['Content-Type'],
  }
});

// WebSocket connection handler
io.on('connection', (socket) => {
  console.log('A user connected:', socket.id);

  // Example: Generate a notification when a user connects
  const notification = {
    message: `User ${socket.id} has connected`,
    timestamp: new Date(),
  };

  // Emit the notification to the client
  socket.emit('new_notification', notification);

  // Save the notification to the database
  saveNotificationToDB(notification);

  // Handle client disconnection
  socket.on('disconnect', () => {
    console.log('User disconnected:', socket.id);
  });
});

// Function to save the notification to the database
// Function to save the notification to the database
async function saveNotificationToDB(notification) {
  try {
    const newNotification = new Notification(notification);
    await newNotification.save();
    console.log('Notification saved to DB');
  } catch (err) {
    console.error('Error saving notification:', err);
  }
}


// Start the server
server.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

// Normalization function
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // Handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
